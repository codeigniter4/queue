{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Queue Documentation","text":"<p>A library that helps you handle Queues in the CodeIgniter 4 framework.</p> <p>Add job to the queue.</p> <pre><code>service('queue')-&gt;push('queueName', 'jobName', ['array' =&gt; 'parameters']);</code></pre> <p>Listen for queued jobs.</p> <pre><code>php spark queue:work queueName</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>PHP 8.1+</li> <li>CodeIgniter 4.3+</li> </ul> <p>If you use <code>database</code> handler: - MySQL 8.0.1+ - MariaDB 10.6+ - PostgreSQL 9.5+ - SQL Server 2012+ - Oracle 12.1+ - SQLite3</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Configuration</li> <li>Basic usage</li> <li>Running queues</li> <li>Commands</li> <li>Troubleshooting</li> </ul>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Every open-source project depends on its contributors to be a success. The following users have contributed in one manner or another in making this project:</p> <p> </p> <p>Made with contrib.rocks.</p>"},{"location":"basic-usage/","title":"Basic usage","text":"<p>The reason we choose queues is that we want to run jobs in the background.</p> <p>Here we will present how you can create your own job class, which you will later use in your own queue.</p> <ul> <li>Create a job class</li> <li>Implement a job</li> <li>Sending job to the queue</li> <li>Consuming the queue</li> </ul>"},{"location":"basic-usage/#create-a-job-class","title":"Create a job class","text":"<p>Here with help comes a generator that will allow us to quickly get started. In our example we will create the <code>Email</code> class:</p> <pre><code>php spark queue:job Email</code></pre> <p>The above command will create a file in <code>App\\Jobs</code> namespace. Once we have our class, we need to add it to the <code>$jobHandlers</code> array, in the <code>Config\\Queue</code> configuration file.</p> <pre><code>// app/Config/Queue.php\n\nuse App\\Jobs\\Email;\n\n// ...\n\n/**\n * Your jobs handlers.\n */\npublic array $jobHandlers = [\n    'email' =&gt; Email::class,\n];\n\n// ...</code></pre>"},{"location":"basic-usage/#implement-a-job","title":"Implement a job","text":"<p>One of the most popular tasks delegated to a queue is sending email messages. Therefore, in this example, we will just implement that.</p> <pre><code>&lt;?php\n\nnamespace App\\Jobs;\n\nuse Exception;\nuse CodeIgniter\\Queue\\BaseJob;\nuse CodeIgniter\\Queue\\Interfaces\\JobInterface;\n\nclass Email extends BaseJob implements JobInterface\n{\n    /**\n     * @throws Exception\n     */\n    public function process()\n    {\n        $email  = service('email', null, false);\n        $result = $email\n            -&gt;setTo('test@email.test')\n            -&gt;setSubject('My test email')\n            -&gt;setMessage($this-&gt;data['message'])\n            -&gt;send(false);\n\n        if (! $result) {\n            throw new Exception($email-&gt;printDebugger('headers'));\n        }\n\n        return $result;\n    }\n}</code></pre> <p>To handles the job we always use the <code>process</code> method. This method is called when our job is executed.</p> <p>You may be wondering what the <code>$this-&gt;data['message']</code> variable is all about. We'll explain that in detail in the next section, but for now it's important for you to remember that all the variables we pass to the Job class are always held in the <code>$this-&gt;data</code> variable.</p> <p>Throwing an exception is a way to let the queue worker know that the job has failed.</p> <p>We can also configure some things on the job level. It's a number of tries, when the job is failing and time after the job will be retried again after failure. We can specify these options by using variables:</p> <pre><code>// ...\n\nclass Email extends BaseJob implements JobInterface\n{\n    protected int $retryAfter = 60;\n    protected int $tries      = 1;\n\n    // ...\n\n}</code></pre> <p>Values presented above, are the default one. So you need to add them only when you want to change them.</p> <p>These variables may be overwritten by the queue worker, if we use the proper parameters with command <code>queue:work</code>. For more information, see commands.</p>"},{"location":"basic-usage/#sending-job-to-the-queue","title":"Sending job to the queue","text":"<p>Sending a task to the queue is very simple and comes down to one command:</p> <pre><code>service('queue')-&gt;push('queueName', 'jobName', ['array' =&gt; 'parameters']);</code></pre> <p>In our particular case, for the <code>Email</code> class, it might look like this:</p> <pre><code>service('queue')-&gt;push('emails', 'email', ['message' =&gt; 'Email message goes here']);</code></pre> <p>We will be pushing <code>email</code> job to the <code>emails</code> queue.</p>"},{"location":"basic-usage/#consuming-the-queue","title":"Consuming the queue","text":"<p>Since we sent our sample job to queue <code>emails</code>, then we need to run the worker with the appropriate queue:</p> <pre><code>php spark queue:work emails</code></pre> <p>Now we are going to consume jobs from the queue <code>emails</code>. This command has many parameters, but you can learn more about that at commands page.</p>"},{"location":"commands/","title":"Commands","text":"<p>Here are all the commands you can use with the Queue library.</p> <p>Available options:</p> <ul> <li>queue:publish</li> <li>queue:job</li> <li>queue:work</li> <li>queue:stop</li> <li>queue:clear</li> <li>queue:failed</li> <li>queue:retry</li> <li>queue:forget</li> <li>queue:flush</li> </ul>"},{"location":"commands/#queuepublish","title":"queue:publish","text":"<p>Allows you to publish a configuration class in the application namespace.</p>"},{"location":"commands/#example","title":"Example","text":"<pre><code>php spark queue:publish</code></pre>"},{"location":"commands/#queuejob","title":"queue:job","text":"<p>Generates a new job file.</p>"},{"location":"commands/#arguments","title":"Arguments","text":"<ul> <li><code>name</code> - The job class name.</li> </ul>"},{"location":"commands/#options","title":"Options","text":"<ul> <li><code>--namespace</code> - Set root namespace. Default: \"APP_NAMESPACE\".</li> <li><code>--suffix</code> - Append the component title to the class name (e.g. Email =&gt; EmailJob).</li> <li><code>--force</code> - Force overwrite existing file.</li> </ul>"},{"location":"commands/#example_1","title":"Example","text":"<pre><code>php spark queue:job Email</code></pre> <p>It will generate the <code>Email</code> class in the <code>App\\Jobs</code> namespace.</p>"},{"location":"commands/#queuework","title":"queue:work","text":"<p>Allows you to consume jobs from a specific queue.</p>"},{"location":"commands/#arguments_1","title":"Arguments","text":"<ul> <li><code>queueName</code> - Name of the queue we will work with.</li> </ul>"},{"location":"commands/#options_1","title":"Options","text":"<ul> <li><code>-sleep</code> - Wait time between the next check for available job when the queue is empty. Default value: <code>10</code> (seconds).</li> <li><code>-rest</code> - Rest time between the jobs in the queue. Default value: <code>0</code> (seconds)</li> <li><code>-max-jobs</code> - The maximum number of jobs to handle before worker should exit. Disabled by default.</li> <li><code>-max-time</code> - The maximum number of seconds worker should run. Disabled by default.</li> <li><code>-memory</code> - The maximum memory in MB that worker can take. Default value: <code>128</code>.</li> <li><code>-priority</code> - The priority for the jobs from the queue (comma separated). If not provided explicit, will follow the priorities defined in the config via <code>$queuePriorities</code> for the given queue. Disabled by default.</li> <li><code>-tries</code> - The number of attempts after which the job will be considered as failed. Overrides settings from the Job class. Disabled by default.</li> <li><code>-retry-after</code> - The number of seconds after which the job is to be restarted in case of failure. Overrides settings from the Job class. Disabled by default.</li> <li><code>--stop-when-empty</code> - Stop when the queue is empty.</li> </ul>"},{"location":"commands/#example_2","title":"Example","text":"<pre><code>php spark queue:work emails -max-jobs 5</code></pre> <p>It will listen for 5 jobs from the <code>emails</code> queue and then stop.</p> <pre><code>php spark queue:work emails -max-jobs 5 -priority low,high</code></pre> <p>It will work the same as the previous command but will first consume jobs from the <code>emails</code> queue that were added with the <code>low</code> priority.</p>"},{"location":"commands/#queuestop","title":"queue:stop","text":"<p>Allows you to stop a specific queue in a safe way. It does this as soon as the job that is running in the queue is completed.</p>"},{"location":"commands/#arguments_2","title":"Arguments","text":"<ul> <li><code>queueName</code> - Name of the queue we will work with.</li> </ul>"},{"location":"commands/#example_3","title":"Example","text":"<pre><code>php spark queue:stop emails</code></pre>"},{"location":"commands/#queueclear","title":"queue:clear","text":"<p>Allows you to remove all jobs from a specific queue.</p>"},{"location":"commands/#arguments_3","title":"Arguments","text":"<ul> <li><code>queueName</code> - Name of the queue we will work with.</li> </ul>"},{"location":"commands/#example_4","title":"Example","text":"<pre><code>php spark queue:clear emails</code></pre>"},{"location":"commands/#queuefailed","title":"queue:failed","text":"<p>Allows you to view all failed jobs. Also only from a specific queue</p>"},{"location":"commands/#options_2","title":"Options","text":"<ul> <li><code>-queue</code> - Queue name.</li> </ul>"},{"location":"commands/#example_5","title":"Example","text":"<pre><code>php spark queue:failed -queue emails</code></pre> <p>It will list failed jobs from the <code>emails</code> queue.</p>"},{"location":"commands/#queueretry","title":"queue:retry","text":"<p>Allows you to retry failed jobs back to the queue.</p>"},{"location":"commands/#arguments_4","title":"Arguments","text":"<ul> <li><code>id</code> - ID of the failed job or \"all\" for all failed jobs.</li> </ul>"},{"location":"commands/#options_3","title":"Options","text":"<ul> <li><code>-queue</code> -  Queue name.</li> </ul>"},{"location":"commands/#example_6","title":"Example","text":"<pre><code>php spark queue:retry all -queue emails</code></pre> <p>It will retry all the failed jobs from the <code>emails</code> queue.</p>"},{"location":"commands/#queueforget","title":"queue:forget","text":"<p>Allows you to delete the failed job by ID</p>"},{"location":"commands/#arguments_5","title":"Arguments","text":"<ul> <li><code>id</code> - ID of the failed job.</li> </ul>"},{"location":"commands/#example_7","title":"Example","text":"<pre><code>php spark queue:forget 123</code></pre>"},{"location":"commands/#queueflush","title":"queue:flush","text":"<p>Allows you to delete many failed jobs at once. Based on the failed date and queue.</p>"},{"location":"commands/#options_4","title":"Options","text":"<ul> <li><code>-hours</code> - Number of hours.</li> <li><code>-queue</code> - Queue name.</li> </ul>"},{"location":"commands/#example_8","title":"Example","text":"<pre><code>php spark queue:flush -hours 6</code></pre> <p>It will delete all failed jobs older than 6 hours.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>To make changes to the config file, we have to have our copy in the <code>app/Config/Queue.php</code>. Luckily, this package comes with handy command that will make this easy.</p> <p>When we run:</p> <pre><code>php spark queue:publish</code></pre> <p>We will get our copy ready for modifications.</p> <p>Available options:</p> <ul> <li>$defaultHandler</li> <li>$handlers</li> <li>$database</li> <li>$redis</li> <li>$predis</li> <li>$keepDoneJobs</li> <li>$keepFailedJobs</li> <li>$queueDefaultPriority</li> <li>$queuePriorities</li> <li>$jobHandlers</li> </ul>"},{"location":"configuration/#defaulthandler","title":"$defaultHandler","text":"<p>The default handler used by the library. Default value: <code>database</code>.</p>"},{"location":"configuration/#handlers","title":"$handlers","text":"<p>An array of available handlers. By now only <code>database</code>, <code>redis</code> and <code>predis</code> handlers are implemented.</p>"},{"location":"configuration/#database","title":"$database","text":"<p>The configuration settings for <code>database</code> handler.</p> <ul> <li><code>dbGroup</code> - The database group to use. Default value: <code>default</code>.</li> <li><code>getShared</code> - Weather to use shared instance. Default value: <code>true</code>.</li> </ul>"},{"location":"configuration/#redis","title":"$redis","text":"<p>The configuration settings for <code>redis</code> handler. You need to have a ext-redis installed to use it.</p> <ul> <li><code>host</code> - The host name or unix socket. Default value: <code>127.0.0.1</code>.</li> <li><code>password</code> - The password. Default value: <code>null</code>.</li> <li><code>port</code> - The port number. Default value: <code>6379</code>.</li> <li><code>timeout</code> - The timeout for connection. Default value: <code>0</code>.</li> <li><code>database</code> - The database number. Default value: <code>0</code>.</li> <li><code>prefix</code> - The default key prefix. Default value: <code>''</code> (not set).</li> </ul>"},{"location":"configuration/#predis","title":"$predis","text":"<p>The configuration settings for <code>predis</code> handler. You need to have Predis installed to use it.</p> <ul> <li><code>scheme</code> - The scheme to use: <code>tcp</code>, <code>tls</code> or <code>unix</code>. Default value: <code>tcp</code>.</li> <li><code>host</code> - The host name. Default value: <code>127.0.0.1</code>.</li> <li><code>password</code> - The password. Default value: <code>null</code>.</li> <li><code>port</code> - The port number (when <code>tcp</code>). Default value: <code>6379</code>.</li> <li><code>timeout</code> - The timeout for connection. Default value: <code>5</code>.</li> <li><code>database</code> - The database number. Default value: <code>0</code>.</li> <li><code>prefix</code> - The default key prefix. Default value: <code>''</code> (not set).</li> </ul>"},{"location":"configuration/#keepdonejobs","title":"$keepDoneJobs","text":"<p>If the job is done, should we keep it in the table? Default value: <code>false</code>.</p>"},{"location":"configuration/#keepfailedjobs","title":"$keepFailedJobs","text":"<p>If the job failed, should we move it to the failed jobs table? Default value: <code>true</code>.</p> <p>This is very useful when you want to be able to see which tasks are failing and why.</p>"},{"location":"configuration/#queuedefaultpriority","title":"$queueDefaultPriority","text":"<p>The default priority for the <code>queue</code> if non default <code>queuePriorities</code> are set. Not set by default.</p> <p>This is needed only if you have defined non default priorities for the queue and the default priority should be different from the <code>default</code> value.</p> <p>Example:</p> <pre><code>public array $queueDefaultPriority = [\n    'emails' =&gt; 'low',\n];</code></pre> <p>This means that all the jobs added to the <code>emails</code> queue will have the default priority set to <code>low</code>.</p>"},{"location":"configuration/#queuepriorities","title":"$queuePriorities","text":"<p>The valid priorities for the <code>queue</code> in the order they will be consumed first. Not set by default.</p> <p>By default, the priority is set to <code>['default']</code>. If you want to have multiple priorities in the queue, you can define them here.</p> <p>Example:</p> <pre><code>public array $queuePriorities = [\n    'emails' =&gt; ['high', 'low'],\n];</code></pre> <p>This means that the jobs added to the <code>emails</code> queue can have either <code>high</code> or <code>low</code> priority.</p>"},{"location":"configuration/#jobhandlers","title":"$jobHandlers","text":"<p>An array of available jobs as key-value. Every job that you want to use with the queue has to be defined here.</p> <p>The key of the array is used to recognize the job, when we push it to the queue.</p> <p>Example:</p> <pre><code>public array $jobHandlers = [\n    'email' =&gt; Email::class,\n];</code></pre>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Composer Installation</li> <li>Manual Installation</li> <li>Database Migration</li> </ul>"},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require codeigniter4/queue</code></pre>"},{"location":"installation/#a-composer-error-occurred","title":"A composer error occurred?","text":"<p>If you get the following error:</p> <pre><code>Could not find a version of package codeigniter4/queue matching your minimum-stability (stable).\nRequire it with an explicit version constraint allowing its desired stability.</code></pre> <ol> <li> <p>Run the following commands to change your minimum-stability in your project <code>composer.json</code>:</p> <pre><code>composer config minimum-stability dev\ncomposer config prefer-stable true</code></pre> </li> <li> <p>Or specify an explicit version:</p> <pre><code>composer require codeigniter4/queue:dev-develop</code></pre> </li> </ol> <p>The above specifies <code>develop</code> branch.    See https://getcomposer.org/doc/articles/versions.md#branches</p>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume, that files from this project will be located in <code>app/ThirdParty/queue</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>CodeIgniter\\Queue</code> namespace to the <code>$psr4</code> array, like in the below example:</p> <pre><code>&lt;?php\n\n// ...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Config'      =&gt; APPPATH . 'Config',\n    'CodeIgniter\\Queue' =&gt; APPPATH . 'ThirdParty/queue/src',\n];\n\n// ...</code></pre>"},{"location":"installation/#database-migration","title":"Database Migration","text":"<p>Regardless of which installation method you chose, we also need to migrate the database to add new tables.</p> <p>You can do this with the following command:</p> <pre><code>php spark migrate --all</code></pre>"},{"location":"running-queues/","title":"Running queues","text":"<p>Running a queue can be done in several ways. It all depends on what kind of environment and technical skills we have. One of the best ways is to use Supervisor. Sadly, it's not trivial and will not work for every environment... luckily there are other options too.</p>"},{"location":"running-queues/#with-supervisor","title":"With Supervisor","text":"<p>Since Supervisor is taking care of everything for us and will make out queue worker up and running, we can use this command:</p> <pre><code>php spark queue:work emails -wait 10</code></pre> <p>This will cause command to check for the new jobs every 10 seconds if the queue is empty. But it will not quit. Waiting time is important since we don't want to overflow out database with the unnecessary queries.</p>"},{"location":"running-queues/#with-cron","title":"With CRON","text":"<p>Using queues with CRON is more challenging, but definitely doable. You can use command like this:</p> <pre><code>php spark queue:work emails -max-jobs 20 --stop-when-empty</code></pre> <p>We can schedule CRON to execute our command every minute. This way, if there are no emails to handle, the command will quit immediately. And if there are many emails the batch of 20 will be handled every minute.</p> <p>We could think about resigning with <code>-max-jobs</code> parameter, but it can have unpredictable consequences (in the worst case scenario) we may have several commands running at the same time, which will send emails, causing the queue to be finished faster (in theory). But the number of the occupied resources, may be quite big. Especially if we will be flooded with the emails by some bad actor.</p> <p>So choosing the right command is not so obvious. We have to estimate how many jobs we will have in the queue and decide how crucial it is to empty the queue as soon as possible.</p> <p>You might use CodeIgniter Tasks library to schedule queue worker instead of working directly with CRON.</p>"},{"location":"running-queues/#working-with-priorities","title":"Working with priorities","text":"<p>By default, every job in the queue has the same priority. However, we can send the jobs to the queue with different priorities. This way some jobs may be handled earlier.</p> <p>As an example, we will define priorities for the <code>emails</code> queue:</p> <pre><code>// app/Config/Queue.php\n\npublic array $queueDefaultPriority = [\n    'emails' =&gt; 'low',\n];\n\npublic array $queuePriorities = [\n    'emails' =&gt; ['high', 'low'],\n];</code></pre> <p>With this configuration, we can now add new jobs to the queue like this:</p> <pre><code>// This job will have low priority:\nservice('queue')-&gt;push('emails', 'email', ['message' =&gt; 'Email message with low priority']);\n// But this one will have high priority\nservice('queue')-&gt;setPriority('high')-&gt;push('emails', 'email', ['message' =&gt; 'Email message with high priority']);</code></pre> <p>Now, if we run the worker:</p> <pre><code>php spark queue:work emails</code></pre> <p>It will consume the jobs from the queue based on priority set in the config: <code>$queuePriorities</code>. So, first <code>high</code> priority and then <code>low</code> priority.</p> <p>But we can also run the worker like this:</p> <pre><code>php spark queue:work emails -priority low,high</code></pre> <p>This way, worker will consume jobs with the <code>low</code> priority and then with <code>high</code>. The order set in the config file is override.</p>"},{"location":"running-queues/#running-many-instances-of-the-same-queue","title":"Running many instances of the same queue","text":"<p>As mentioned above, sometimes we may want to have multiple instances of the same command running at the same time. The queue is safe to use in that scenario with all databases except <code>SQLite3</code> since it doesn't guarantee that the job will be selected only by one process.</p>"},{"location":"running-queues/#handling-long-running-process","title":"Handling long-running process","text":"<p>If we decide to run the long process e.g. with the command:</p> <pre><code>php spark queue:work emails -wait 10</code></pre> <p>We must remember to restart our command every time we add a new job or change the code in the existing job files. The reason is that the changes will not be visible before we restart the command.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#why-cant-i-assign-an-object-to-a-job-queue","title":"Why can't I assign an object to a job queue?","text":"<p>If you want to assign an object to the queue, please make sure it implements <code>JsonSerializable</code> interface. This is how CodeIgniter Entities are handled by default.</p> <p>You may ask, why not just use <code>serialize</code> and <code>unserialize</code>? There are security reasons that keep us from doing so. These functions are not safe to use with user provided data.</p>"},{"location":"troubleshooting/#i-get-an-error-when-trying-to-install-via-composer","title":"I get an error when trying to install via composer.","text":"<p>Please see these instructions.</p>"}]}